"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9656],{4852:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(9231);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},d=Object.keys(e);for(i=0;i<d.length;i++)n=d[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(i=0;i<d.length;i++)n=d[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=i.createContext({}),s=function(e){var t=i.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(a.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,d=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),p=r,f=c["".concat(a,".").concat(p)]||c[p]||m[p]||d;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var d=n.length,o=new Array(d);o[0]=p;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<d;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>l,toc:()=>s});var i=n(5799),r=(n(9231),n(4852));const d={id:"didtools_multidid",title:"Module: @didtools/multidid",custom_edit_url:null},o="Multidid",l={unversionedId:"api/modules/didtools_multidid",id:"api/modules/didtools_multidid",title:"Module: @didtools/multidid",description:"Multidid is a representation strategy for DIDs and DID URLs that is very compact and extensible. It allows any DID method to be represented as a",source:"@site/docs/api/modules/didtools_multidid.md",sourceDirName:"api/modules",slug:"/api/modules/didtools_multidid",permalink:"/docs/api/modules/didtools_multidid",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"didtools_multidid",title:"Module: @didtools/multidid",custom_edit_url:null}},a={},s=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Classes",id:"classes",level:2}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"multidid"},"Multidid"),(0,r.kt)("p",null,"Multidid is a representation strategy for DIDs and DID URLs that is very compact and extensible. It allows any DID method to be represented as a\nstring of bytes. Reference ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ChainAgnostic/multidid"},"specification"),"."),(0,r.kt)("p",null,"This library is a multidid utility library to encode and decode multidids to their byte and string representation and convert from did strings to multidid representations."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save @didtools/multidid\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Multidid } from '@didtools/multidid'\n\nconst didString = \"did:key:z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp#z6MkiTBz1ymuepAQ4HEHYSF1H8quG5GLVVQR3djdX3mDooWp\"\n\n// Multidid instance from did string\nconst multidid = Multidid.fromString(didString)\n\n// Encode to bytes\nmultidid.toBytes()\n\n// Decode from bytes to multidid instance\nMultidid.fromBytes(bytes)\n\n// Encode as base16 string\nconst mdStr = multidid.toMultibase('base16')\nconsole.log(mdStr)\n// f9d1aed013b6a27bcceb6a42d62a3a8d02a6f0d73653215771de243a63ac048a18b59da29307a364d6b6954427a31796d75657041513448454859534631483871754735474c5656515233646a6458336d446f6f5770\n\n// Multidid instance from base encoded string\nMultidid.fromMultibase(mdStr)\n\n// DID string from multidid\nmultidid.toString()\n\n")),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/api/classes/didtools_multidid.Multidid"},"Multidid"))))}m.isMDXComponent=!0}}]);